version: '3'
tasks:
  default:
    desc: "Default command"
    cmds:
      - task --list-all


# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# System Management 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  ports:
    desc: "This is a command to list ports in use"
    cmds:
      - ss -tunl


# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Docs 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  docs:
    desc: "🌐 Serve docs locally -> http://127.0.0.1:8000/argocd-demo/"
    cmds:
      - poetry run mkdocs serve --clean

# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Cluster Management 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  dev:
    desc: "Spin up teh complete dev cluster"
    cmds:
      - task: create-cluster
      - task: tf-apply
      - task: helm-package-push
      - task: bootstrap-sealed-secret
      - task: bootstrap-app0
      - task: expose-kubeconfig
      - task: argocd-init-passwd
      - task: port-fwd-argocd
      - echo "Done"
  

  create-cluster:
    desc: "Create a Kind cluster if it doesn't already exist"
    cmds:
      - kind create cluster -n argocd-demo --image kindest/node:v1.33.1 || echo "Cluster already exists"
      - kubectx kind-argocd-demo
    status:
      - kind get clusters | grep argocd-demo

  expose-kubeconfig:
    desc: "Expose cluster kubeconfig"
    cmds:
      - kubectx kind-argocd-demo
      - cat ~/.kube/config > config-kind-dev.txt
      - echo "Copy config-kind-dev.txt into lens to view your cluster"

  argocd-init-passwd:
    desc: "This is a command to initialize argocd password. Use admin as username"
    cmds:
      - kubectx kind-argocd-demo
      - kubens argocd
      - argocd admin initial-password

  bootstrap-sealed-secret:
    desc: "Bootstrap sealed image updater secret"
    deps: [kubeseal]
    cmds:
      - kubectx kind-argocd-demo
      - kubens argocd
      - kubectl apply -f 1-sealed-repo-secret.yaml

  bootstrap-app0:
    desc: "Bootstrap argocd application using app0"
    cmds:
      - kubectx kind-argocd-demo
      - kubens argocd
      - kubectl apply -f 0-application.yaml

  cleanup:
    desc: "Deletes the terraform resources and the kind cluster"
    dir: terraform
    cmds:
      - kubectx kind-argocd-demo || echo "Kind cluster not found"
      - terraform destroy -auto-approve || echo "Terraform resources not found"
      - kind delete cluster -n argocd-demo || echo "Kind cluster not found"
      - task: del-ssh-key || echo "SSH key not found"

# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Helm 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  helm-add-all:
    desc: "Add all helm repos"
    cmds:
      - kubectx kind-argocd-demo
      - helm repo add argocd https://argoproj.github.io/argo-helm
      - helm repo add chartmuseum https://chartmuseum.github.io/charts
      - helm repo add argocd-image-updater https://argocd-image-updater.github.io/argocd-image-updater
      - helm repo add bitnami-sealed-secrets https://charts.bitnami.com/bitnami
      - helm repo update

  helm-package-push:
    desc: "Package and push helm chart to chartmuseum"
    cmds:
      - helm package environments/dev/helm/myargoapp-chart -d ./packaged-charts/
      - curl --data-binary @"./packaged-charts/my-argocd-app-0.2.0.tgz" http://localhost:8083/api/charts

  helm-dry-run:
    desc: "Dry run helm chart to check if it will install successfully"
    cmds:
      - kubectx kind-argocd-demo
      - kubens argocd
      - helm install myargoapp-chart environments/dev/helm/myargoapp-chart --values environments/dev/helm/myargoapp-chart/values.yaml --dry-run --debug


# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Terraform 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  tf-lint:
    desc: "Makes sure tf files arecorrectly formatted before running tf commands"
    dir: terraform
    cmds:
      - terraform validate
      - terraform fmt

  tf-apply: # any resource mentioned in tf files will be installed
    desc: "Install or update Argo CD resources using Terraform"
    dir: terraform
    deps:
      - create-cluster
      - tf-lint
    cmds:
      - kubectx kind-argocd-demo
      - terraform init
      - terraform apply -auto-approve

# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# SSH 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 


  ssh-keygen:
    desc: "Generate ssh key for argocd-image-updater"
    cmds:
      - ssh-keygen -t ed25519 -C "argocd@image-updater" -f ~/.ssh/argocd_image_updater_ed25519

  del-ssh-key:
    desc: "Delete ssh key for argocd-image-updater"
    cmds:
      - rm ~/.ssh/argocd_image_updater_ed25519
      - rm ~/.ssh/argocd_image_updater_ed25519.pub

# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Docker 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  docker-push:
    desc: "Tag and push docker image -> task docker-tag-push version=\"1.2.0\""
    requires:
      vars:
        - version
    cmds:
      - docker login
      - docker tag devopssean/zta_demo_app:dev devopssean/zta_demo_app:{{.version}}
      - docker push devopssean/zta_demo_app:{{.version}}


# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Port Forward 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  port-fwd-argocd:
    desc: "Forward the Argo CD server UI to localhost:8080"
    cmds:
      - kubectx kind-argocd-demo
      - kubectl port-forward svc/argocd-server -n argocd 8080:443

  port-fwd-chartmuseum:
    desc: "Forward the Chartmuseum server UI to localhost:8083"
    cmds:
      - kubectx kind-argocd-demo
      - kubens chartmuseum
      - kubectl port-forward svc/chartmuseum 8083:8080


# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Kubeseal 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  kubeseal:
    desc: "Encrypt a secret using kubeseal"
    cmds:
      - kubectx kind-argocd-demo
      - kubens argocd
      - kubeseal --controller-name sealed-secrets -o yaml -n kube-system < 0-repo-secret.yaml > 1-sealed-repo-secret.yaml