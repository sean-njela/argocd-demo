version: '3'

# ─── Global Configuration ───────────────────────────────────────────────────────
# Specify output style: options: [prefixed, unified]
output: prefixed

# Support .env files for environment variables
dotenv:
  - .env

vars:
  ID: '{{.ID}}'
  REGION: '{{.REGION}}'
  ECR: '{{.ECR}}'
  ECR1: '{{.ECR1}}'
  ECR2: '{{.ECR2}}'
  CLUSTER_NAME: '{{.CLUSTER_NAME}}'
  CLUSTER_ARN: '{{.CLUSTER_ARN}}'
  SSH_KEY_PATH: '{{.SSH_KEY_PATH}}'


includes:
  # Example include of shared tasks
  common:
    taskfile: ./Taskfile.gitflow.yaml
    flatten: true


tasks:
  default:
    desc: "Default command"
    cmds:
      - task --list-all


# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# System Management 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  ports:
    desc: "This is a command to list ports in use"
    cmds:
      - ss -tunl


# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Docs 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  docs:
    desc: "🌐 Serve docs locally -> http://127.0.0.1:8000/argocd-demo/"
    cmds:
      - poetry run mkdocs serve --clean

# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Cluster Management 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  dev:
    desc: "Spin up the complete dev cluster"
    cmds:
      - task: create-cluster-dev
      - task: tf-apply-dev
      - task: kubeseal
      - task: bootstrap-sealed-secret-dev
      - task: bootstrap-notifications-secret-dev
      - task: bootstrap-notifications-cm-dev
      - task: bootstrap-app0-dev
      - task: expose-kubeconfig
      - task: argocd-init-passwd-dev
      - echo "Done"
  

  prod:
    desc: "Spin up the complete prod cluster"
    cmds:
      - task: tf-apply-prod
      - aws eks update-kubeconfig --name {{.CLUSTER_NAME}} --region {{.REGION}}
      - kubectx {{.CLUSTER_ARN}}
      - kubens argocd
      - task: bootstrap-sealed-secret-prod
      - task: bootstrap-notifications-secret-prod
      - task: bootstrap-notifications-cm-prod
      - task: bootstrap-app2-prod
      - task: bootstrap-app3-prod
      - task: argocd-init-passwd-prod
      - task: port-fwd-argocd-prod
      - echo "Done"


  create-cluster-dev:
    desc: "Create a Kind cluster if it doesn't already exist"
    cmds:
      - kind create cluster -n argocd-dev --image kindest/node:v1.33.1 || echo "Cluster already exists"
      - kubectx kind-argocd-dev
    status:
      - kind get clusters | grep argocd-dev

  create-cluster-prod:
    desc: "Create a Kind cluster if it doesn't already exist"
    cmds:
      - kind create cluster -n argocd-prod --image kindest/node:v1.33.1 || echo "Cluster already exists"
      - kubectx {{.CLUSTER_ARN}}
    status:
      - kind get clusters | grep argocd-prod

  expose-kubeconfig:
    desc: "Expose cluster kubeconfig"
    cmds:
      - kubectx kind-argocd-dev
      - cat ~/.kube/config > config-kind-dev.txt
      - echo "Copy config-kind-dev.txt into lens to view your cluster"

  argocd-init-passwd-dev:
    desc: "This is a command to initialize argocd password. Use admin as username"
    cmds:
      - kubectx kind-argocd-dev
      - kubens argocd
      - argocd admin initial-password

  argocd-init-passwd-prod:
    desc: "This is a command to initialize argocd password. Use admin as username"
    cmds:
      - kubectx {{.CLUSTER_ARN}}
      - kubens argocd
      - argocd admin initial-password

# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Bootsraping
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  bootstrap-sealed-secret-dev:
    desc: "Bootstrap sealed image updater secret"
    cmds:
      - kubectx kind-argocd-dev
      - kubens argocd
      - kubectl apply -f argocd/1-sealed-repo-secret.yaml

  bootstrap-sealed-secret-prod:
    desc: "Bootstrap sealed image updater secret"
    cmds:
      - kubectx {{.CLUSTER_ARN}}
      - kubens argocd
      - kubectl apply -f argocd/0-repo-secret.yaml

  bootstrap-notifications-secret-dev:
    desc: "Bootstrap argocd notifications secret"
    cmds:
      - kubectx kind-argocd-dev
      - kubens argocd 
      - kubectl apply -f argocd/1-sealed-notifications-secret.yaml

  bootstrap-notifications-secret-prod:
    desc: "Bootstrap argocd notifications secret"
    cmds:
      - kubectx {{.CLUSTER_ARN}}
      - kubens argocd 
      - kubectl apply -f argocd/0-notifications-secret.yaml

  bootstrap-notifications-cm-dev:
    desc: "Bootstrap argocd notifications configmap"
    cmds:
      - kubectx kind-argocd-dev
      - kubens argocd
      - kubectl apply -f argocd/0-notifications-cm.yaml

  bootstrap-notifications-cm-prod:
    desc: "Bootstrap argocd notifications configmap"
    cmds:
      - kubectx {{.CLUSTER_ARN}}
      - kubens argocd
      - kubectl apply -f argocd/0-notifications-cm.yaml

  bootstrap-app0-dev:
    desc: "Bootstrap argocd application using app0"
    cmds:
      - kubectx kind-argocd-dev
      - kubens argocd
      - kubectl apply -f argocd/0-application.yaml

  bootstrap-app2-prod:
    desc: "Bootstrap argocd application using app2"
    cmds:
      - kubectx {{.CLUSTER_ARN}}
      - kubens argocd
      - kubectl apply -f argocd/2-application.yaml

  bootstrap-app3-prod:
    desc: "Bootstrap argocd application using app3"
    cmds:
      - kubectx {{.CLUSTER_ARN}}
      - kubens argocd
      - kubectl apply -f argocd/3-application.yaml

# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Cleanup
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  cleanup-dev:
    desc: "Deletes the terraform resources and the dev kind cluster"
    dir: terraform/environments/dev
    cmds:
      - terraform destroy -auto-approve 
      - kind delete cluster -n argocd-dev 

  cleanup-prod:
    desc: "Deletes the terraform resources and the prod kind cluster"
    dir: terraform/environments/prod
    cmds:
      - terraform destroy -auto-approve 

# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Helm 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  helm-add-all:
    desc: "Add all helm repos"
    cmds:
      - kubectx kind-argocd-dev
      - helm repo add argocd https://argoproj.github.io/argo-helm
      - helm repo add chartmuseum https://chartmuseum.github.io/charts
      - helm repo add argocd-image-updater https://argocd-image-updater.github.io/argocd-image-updater
      - helm repo add bitnami-sealed-secrets https://charts.bitnami.com/bitnami
      - helm repo update

  helm-package-push:
    desc: "Package and push helm chart to chartmuseum"
    cmds:
      - helm package environments/dev/helm/myargoapp-chart -d ./packaged-charts/
      - curl --data-binary @"./packaged-charts/my-argocd-app-0.2.0.tgz" http://localhost:8083/api/charts

  helm-dry-run:
    desc: "Dry run helm chart to check if it will install successfully"
    cmds:
      - kubectx kind-argocd-dev
      - kubens argocd
      - helm install myargoapp-chart environments/dev/helm/myargoapp-chart --values environments/dev/helm/myargoapp-chart/values.yaml --dry-run --debug


# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Terraform 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  tf-apply-dev: # any resource mentioned in tf files will be installed
    desc: "Install or update Argo CD resources using Terraform"
    dir: terraform/environments/dev
    cmds:
      - terraform init
      - terraform apply -auto-approve

  tf-apply-prod: # any resource mentioned in tf files will be installed
    desc: "Install or update Argo CD resources using Terraform for prod env"
    dir: terraform/environments/prod
    cmds:
      - terraform init
      - terraform apply -auto-approve

# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# SSH 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 


  ssh-keygen:
    desc: "Generate ssh key for argocd-image-updater"
    cmds:
      - ssh-keygen -t ed25519 -C "argocd@image-updater" -f {{.SSH_KEY_PATH}}

  del-ssh-key:
    desc: "Delete ssh key for argocd-image-updater"
    cmds:
      - rm {{.SSH_KEY_PATH}}
      - rm {{.SSH_KEY_PATH}}.pub

# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Docker 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  docker-push-dev:
    desc: "Tag and push docker image -> task docker-tag-push version=\"1.2.0\""
    requires:
      vars:
        - version
    cmds:
      - docker login
      - docker tag devopssean/zta_demo_app:dev devopssean/zta_demo_app:{{.version}}
      - docker push devopssean/zta_demo_app:{{.version}}


  ecr-push-prod1:
    desc: "Tag and push docker image to ECR1"
    requires:
      vars:
        - version
    cmds:
      - aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin {{.ECR}}
      - docker tag devopssean/zta_demo_app:dev {{.ECR1}}:{{.version}}
      - docker push {{.ECR1}}:{{.version}}


  ecr-push-prod2:
    desc: "Tag and push docker image to ECR2"
    requires:
      vars:
        - version
    cmds:
      - aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin {{.ECR2}}
      - docker tag devopssean/zta_demo_app:dev {{.ECR2}}:{{.version}}
      - docker push {{.ECR2}}:{{.version}}


# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Port Forward 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  port-fwd-argocd-dev:
    desc: "Forward the Argo CD server UI to localhost:8080"
    cmds:
      - kubectx kind-argocd-dev
      - kubectl port-forward svc/argocd-server -n argocd 8080:443

  port-fwd-argocd-prod:
    desc: "Forward the Argo CD server UI to localhost:8080"
    cmds:
      - kubectx {{.CLUSTER_ARN}}
      - kubectl port-forward svc/argocd-server -n argocd 8080:443

  port-fwd-chartmuseum:
    desc: "Forward the Chartmuseum server UI to localhost:8083"
    cmds:
      - kubectx kind-argocd-dev
      - kubens chartmuseum
      - kubectl port-forward svc/chartmuseum 8083:8080


# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 
# Kubeseal 
# # # # # # # ---------- # # # # # # # ---------- # # # # # # # 

  kubeseal:
    desc: "Encrypt a secret using kubeseal"
    cmds:
      - kubectx kind-argocd-dev
      - kubens argocd
      - kubeseal --controller-name sealed-secrets -o yaml -n kube-system < argocd/0-repo-secret.yaml > argocd/1-sealed-repo-secret.yaml
      - kubeseal --controller-name sealed-secrets -o yaml -n argocd < argocd/0-notifications-secret.yaml > argocd/1-sealed-notifications-secret.yaml