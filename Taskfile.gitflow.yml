version: '3'

vars:
  MAIN_BRANCH: main
  DEV_BRANCH: develop

tasks:
  default:
    desc: "üìã List all tasks"
    cmds:
      - task --list-all

  commit:
    desc: "Add and commit changes -> task commit message=\"your commit message\""
    cmds:
      - |
        git status
        git add .
        git commit -m "{{.message}}"
        git status
    requires:
      vars:
        - message

  init:
    desc: "‚öôÔ∏è Initialize Git Flow with 'main' and 'develop'"
    preconditions:
      - sh: "[ -d .git ]"
        msg: "‚ùå Not a Git repository. Run 'git init' first."
      - sh: "! git config --get gitflow.branch.master >/dev/null 2>&1"
        msg: "‚úÖ Git Flow is already configured."
    cmds:
      - |
        echo "üöÄ Initializing Git Flow..."
        
        # Create branches if missing
        git show-ref --quiet refs/heads/{{.MAIN_BRANCH}} || git checkout -b {{.MAIN_BRANCH}}
        git show-ref --quiet refs/heads/{{.DEV_BRANCH}} || git checkout -b {{.DEV_BRANCH}}

        # Set Git Flow config
        git config gitflow.branch.master {{.MAIN_BRANCH}}
        git config gitflow.branch.develop {{.DEV_BRANCH}}
        git config gitflow.prefix.feature feature/
        git config gitflow.prefix.bugfix bugfix/
        git config gitflow.prefix.release release/
        git config gitflow.prefix.hotfix hotfix/
        git config gitflow.prefix.support support/
        git config gitflow.prefix.versiontag ""

        # Final init
        git flow init -d

        # Push branches
        git fetch --all --prune
        git push -u origin {{.MAIN_BRANCH}} || true
        git push -u origin {{.DEV_BRANCH}} || true

        echo "‚úÖ Git Flow setup completed."


  sync:
    desc: "üîÑ Sync current branch with latest 'develop'"
    cmds:
      - |
        echo "üîÅ Syncing..."
        git fetch origin
        git checkout {{.DEV_BRANCH}}
        git pull --ff-only origin {{.DEV_BRANCH}} || (echo "‚ùå Cannot fast-forward develop. Resolve manually." && exit 1)
        git checkout -
        git merge --no-ff {{.DEV_BRANCH}} -m "Sync with develop $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        echo "‚úÖ Synced with develop."

  feature:start:
    desc: "üöÄ Start a new feature from 'develop' -> task feature:start name=login-form"
    cmds:
      - |
        name=$(echo "{{.name}}" | tr '[:upper:]' '[:lower:]')
        echo "üöß Starting feature/$name..."
        git checkout {{.DEV_BRANCH}}
        git pull --ff-only origin {{.DEV_BRANCH}} || (echo "‚ùå Cannot fast-forward develop. Resolve manually." && exit 1)
        git flow feature start "$name"
    requires:
      vars:
        - name

  feature:push:
    desc: "üöÄ Push current feature to origin"
    cmds:
      - git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)

  feature:clean:
    desc: "üßπ Delete the current local feature branch after PR merge"
    cmds:
      - |
        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
        if [[ "$CURRENT_BRANCH" != feature/* ]]; then
          echo "‚ùå Not on a feature branch. Aborting."
          exit 1
        fi
        echo "Cleaning up feature branch: $CURRENT_BRANCH"
        git checkout develop
        git pull origin develop
        git branch -D "$CURRENT_BRANCH" || echo "‚ö†Ô∏è  Branch '$CURRENT_BRANCH' could not be deleted."
        git fetch origin --prune

  release:start:
    desc: "üöÄ Start a new release from develop -> task release:start version=1.2.0"
    cmds:
      - |
        version=$(echo "{{.version}}" | tr '[:upper:]' '[:lower:]')
        git checkout {{.DEV_BRANCH}}
        git pull --ff-only origin {{.DEV_BRANCH}} || (echo "‚ùå Develop has diverged. Resolve manually." && exit 1)
        git flow release start "$version"
    requires:
      vars:
        - version

  release:verify:
    desc: "‚úÖ Verifies that 'main' and 'develop' are clean and fast-forwardable -> task release:verify version=1.2.3"
    cmds:
      - |
        version=$(echo "{{.version}}" | tr '[:upper:]' '[:lower:]')

        echo "üîç Checking for preconditions before release:finish..."
        git fetch origin

        git checkout main
        if ! git merge-base --is-ancestor main origin/main; then
          echo "‚ùå Your local main is behind origin/main. Run: git pull origin main"
          exit 1
        fi

        git checkout develop
        if ! git merge-base --is-ancestor develop origin/develop; then
          echo "‚ùå Your local develop is behind origin/develop. Run: git pull origin develop"
          exit 1
        fi

        echo "‚úÖ 'main' and 'develop' are safe for release:finish"
    requires:
      vars:
        - version

  release:repair:
    desc: "üõ†Ô∏è Repairs a broken release:finish (after a failed conflict) -> task release:repair version=1.2.3"
    cmds:
      - |
        version=$(echo "{{.version}}" | tr '[:upper:]' '[:lower:]')
        echo "üõ† Repairing release/$version..."

        echo "‚û°Ô∏è  Step 1: Checkout main and resolve any conflicts manually."
        git checkout main

        git status

        echo ""
        echo "‚ö†Ô∏è  If you see 'Unmerged paths' in Taskfile.yml or others:"
        echo "   1. Open the file: nano Taskfile.yml"
        echo "   2. Fix the conflict"
        echo "   3. Run: git add Taskfile.yml"
        echo "   4. Run: git commit -m 'Resolve release conflict'"
        echo ""

        echo "‚û°Ô∏è  Step 2: Back-merge main into develop"
        git checkout develop
        git pull origin develop
        git merge main -m "Merge main after release $version"

        echo "‚û°Ô∏è  Step 3: Push branches and tags"
        git push origin main
        git push origin develop
        git push --tags

        echo "‚úÖ Recovered and pushed release $version"
    requires:
      vars:
        - version

  release:finish:
    desc: "üèÅ Finishes and publishes a release (merges, tags, pushes). -> task release:finish version=1.2.0"
    deps:
      - task: release:verify
        vars: { version: "{{.version}}" }
    cmds:
      - |
        version=$(echo "{{.version}}" | tr '[:upper:]' '[:lower:]')
        echo "üèÅ Finishing release $version..."
        git checkout {{.MAIN_BRANCH}}
        git pull origin {{.MAIN_BRANCH}} || (echo "‚ùå Pull failed. Resolve diverged main." && exit 1)
        git checkout {{.DEV_BRANCH}}
        git pull origin {{.DEV_BRANCH}} || (echo "‚ùå Pull failed. Resolve diverged develop." && exit 1)
        git flow release finish -m "Release $version" "$version"
        git push origin {{.MAIN_BRANCH}}
        git push origin {{.DEV_BRANCH}}
        git push --tags
    requires:
      vars:
        - version


  hotfix:start:
    desc: "üî• Start a hotfix from main -> task hotfix:start version=1.2.1"
    preconditions:
      # Check if we're on a clean branch
      - sh: git diff --quiet && git diff --staged --quiet
        msg: "‚ùå You have uncommitted changes. Please commit or stash them first."
      # Check if develop branch is in sync with remote
      - sh: 'git fetch origin {{.DEV_BRANCH}} && [ "$(git rev-parse {{.DEV_BRANCH}})" = "$(git rev-parse origin/{{.DEV_BRANCH}})" ] || [ ! -z "$(git branch --list {{.DEV_BRANCH}})" ]'
        msg: "‚ùå Your local '{{.DEV_BRANCH}}' branch has diverged from 'origin/{{.DEV_BRANCH}}'. Please sync it first with 'task sync'."
      # Check if main branch is in sync with remote
      - sh: 'git fetch origin {{.MAIN_BRANCH}} && [ "$(git rev-parse {{.MAIN_BRANCH}})" = "$(git rev-parse origin/{{.MAIN_BRANCH}})" ] || [ ! -z "$(git branch --list {{.MAIN_BRANCH}})" ]'
        msg: "‚ùå Your local '{{.MAIN_BRANCH}}' branch has diverged from 'origin/{{.MAIN_BRANCH}}'. Please fix this first."
      # Check if hotfix branch already exists
      - sh: '[ -z "$(git branch --list hotfix/{{.version}})" ]'
        msg: "‚ùå Hotfix branch 'hotfix/{{.version}}' already exists. Please use a different version."
    cmds:
      - |
        version=$(echo "{{.version}}" | tr '[:upper:]' '[:lower:]')
        echo "üî• Starting hotfix v$version from {{.MAIN_BRANCH}}..."
        git checkout {{.MAIN_BRANCH}}
        git pull origin {{.MAIN_BRANCH}} || (echo "‚ùå Pull failed. Resolve diverged main." && exit 1)
        git flow hotfix start "$version" || (echo "‚ùå Failed to start hotfix. See error above." && exit 1)
        echo "‚úÖ Hotfix branch 'hotfix/$version' created. Make your changes and then run 'task hotfix:finish version=$version'."
    requires:
      vars:
        - version

  hotfix:finish:
    desc: "üèÅ Finish hotfix, tag and merge -> task hotfix:finish version=1.2.1"
    preconditions:
      # Check if we're on the correct hotfix branch
      - sh: 'git rev-parse --abbrev-ref HEAD | grep -q "^hotfix/{{.version}}$"'
        msg: "‚ùå You must be on the 'hotfix/{{.version}}' branch to finish it. Current branch: $(git rev-parse --abbrev-ref HEAD)"
      # Check if the branch is clean
      - sh: git diff --quiet && git diff --staged --quiet
        msg: "‚ùå You have uncommitted changes. Please commit them first."
      # Check if both target branches exist and are up-to-date
      - sh: 'git fetch origin && git branch -a | grep -q "remotes/origin/{{.MAIN_BRANCH}}"'
        msg: "‚ùå Remote '{{.MAIN_BRANCH}}' branch not found. Please check your repository setup."
      - sh: 'git fetch origin && git branch -a | grep -q "remotes/origin/{{.DEV_BRANCH}}"'
        msg: "‚ùå Remote '{{.DEV_BRANCH}}' branch not found. Please check your repository setup."
    cmds:
      - |
        version=$(echo "{{.version}}" | tr '[:upper:]' '[:lower:]')
        echo "üèÅ Finishing hotfix v$version..."
        
        # Fetch latest from remote to ensure we're up-to-date
        git fetch origin
        
        # Finish the hotfix with proper error handling
        git flow hotfix finish -m "Hotfix v$version" "$version" || {
          echo "‚ùå Failed to finish hotfix. Resolving conflicts may be required."
          echo "üëâ If there are conflicts, resolve them and then run:"
          echo "   git flow hotfix finish '$version'"
          exit 1
        }
        
        # Push changes to remote branches and tags
        echo "üöÄ Pushing changes to remote..."
        git push origin {{.MAIN_BRANCH}} || (echo "‚ùå Failed to push to {{.MAIN_BRANCH}}. Please push manually." && exit 1)
        git push origin {{.DEV_BRANCH}} || (echo "‚ùå Failed to push to {{.DEV_BRANCH}}. Please push manually." && exit 1)
        git push --tags || (echo "‚ùå Failed to push tags. Please push manually." && exit 1)
        
        echo "‚úÖ Hotfix v$version completed successfully!"
    requires:
      vars:
        - version

  clean:branches:
    desc: "üßº Delete all local feature, release, hotfix branches (after merge)"
    cmds:
      - |
        echo "üßπ Cleaning up local branches..."
        for b in $(git branch | grep -E 'feature/|release/|hotfix/' | sed 's/\*//'); do
          git branch -d $b || echo "‚ö†Ô∏è Could not delete $b (maybe not merged?)"
        done


